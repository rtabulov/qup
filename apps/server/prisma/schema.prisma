generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key   String @unique @db.VarChar
  name  String @db.VarChar
  users User[]
}

model Certificate {
  id               String     @id(map: "PK_8daddfc65f59e341c2bbc9c9e43") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String     @db.VarChar
  issuedBy         String     @db.VarChar
  issuedDate       DateTime   @db.Timestamp(6)
  createdAt        DateTime   @default(now()) @db.Timestamp(6)
  startDate        DateTime   @db.Date
  endDate          DateTime   @db.Date
  approved         Boolean    @default(false)
  awaitingApproval Boolean    @default(true)
  comment          String     @default("") @db.VarChar
  teacherId        String?    @db.Uuid
  teacher          User?      @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_a25be4645786e29b64aed7df7c9")
  files            FileMeta[]
}

model Department {
  id       String @id(map: "PK_9a2213262c1593bffb581e382f5") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name     String @unique(map: "UQ_471da4b90e96c1ebe0af221e07b") @db.VarChar
  teachers User[]
}

model FileMeta {
  id            String       @id(map: "PK_62d40db2d2bbcd9bc4162a9b572") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String       @unique @db.VarChar
  mimetype      String       @db.VarChar
  createdAt     DateTime     @default(now()) @db.Timestamp(6)
  certificateId String?      @db.Uuid
  certificate   Certificate? @relation(fields: [certificateId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_742be97b5dc6cfaad0aec931981")
}

model User {
  id           String        @id(map: "PK_cace4a159ff9f2512dd42373760") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  active       Boolean       @default(false)
  createdAt    DateTime      @default(now())
  roleId       String        @db.Uuid
  role         Role          @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  firstName    String        @db.VarChar
  lastName     String        @db.VarChar
  middleName   String        @db.VarChar
  position     String?       @db.VarChar
  email        String        @unique(map: "UQ_e12875dfb3b1d92d7d7c5377e22") @db.VarChar
  password     String        @db.VarChar
  departmentId String?       @db.Uuid
  department   Department?   @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_3d6915a33798152a079997cad28")
  certificates Certificate[]
}
